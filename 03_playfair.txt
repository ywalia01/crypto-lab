Theory:

The Playfair cipher was the first practical digraph substitution cipher. The scheme was invented in 1854 by Charles Wheatstone but was named after Lord Playfair who promoted the use of the cipher. 
The Algorithm consists of 2 steps: 
Generate the key Square(5×5): 
The key square is a 5×5 grid of alphabets that acts as the key for encrypting the plaintext. Each of the 25 alphabets must be unique and one letter of the alphabet (usually J) is omitted from the table (as the table can hold only 25 alphabets). If the plaintext contains J, then it is replaced by I. 
The initial letters in the key square are the unique letters of the key in the order in which they appear followed by the remaining letters of the alphabet in order. 
 
Algorithm to encrypt the plain text: The plaintext is split into pairs of two letters (digraphs). If there is an odd number of letters, a Z is added to the last letter. 

Code:

#include<iostream>
#include<string>
#include<vector>
#include<map>

using namespace std;
int main() {
  int i, j, k, n;
  cout << "\nEnter the message: ";
  string s, origin;

  getline(cin, origin);
  cout << "Enter the key: ";
  string key;
  cin >> key;
  for (i = 0; i < origin.size(); i++) {
    if (origin[i] != ' ')
      s += origin[i];
  }
  vector < vector < char > > a(5, vector < char > (5, ' '));
  n = 5;
  map < char, int > mp;
  k = 0;
  int pi, pj;
  for (i = 0; i < n; i++) {
    for (j = 0; j < n; j++) {
      while (mp[key[k]] > 0 && k < key.size()) {
        k++;
      }
      if (k < key.size()) {
        a[i][j] = key[k];
        mp[key[k]]++;
        pi = i;
        pj = j;
      }
      if (k == key.size())
        break;
    }

    if (k == key.size())
      break;
  }
  k = 0;
  for (; i < n; i++) {
    for (; j < n; j++) {
      while (mp[char(k + 'a')] > 0 && k < 26) {
        k++;
      }
      if (char(k + 'a') == 'j') {
        j--;
        k++;
        continue;
      }
      if (k < 26) {
        a[i][j] = char(k + 'a');
        mp[char(k + 'a')]++;
      }
    }
    j = 0;
  }

  string ans;
  if (s.size() % 2 == 1)
    s += "x";
  for (i = 0; i < s.size() - 1; i++) {
    if (s[i] == s[i + 1])

      s[i + 1] = 'x';
  }

  map < char, pair < int, int > > mp2;

  for (i = 0; i < n; i++) {
    for (j = 0; j < n; j++) {
      mp2[a[i][j]] = make_pair(i, j);
    }
  }

  for (i = 0; i < s.size() - 1; i += 2) {
    int y1 = mp2[s[i]].first;
    int x1 = mp2[s[i]].second;
    int y2 = mp2[s[i + 1]].first;
    int x2 = mp2[s[i + 1]].second;
    if (y1 == y2) {
      ans += a[y1][(x1 + 1) % 5];
      ans += a[y1][(x2 + 1) % 5];
    } else if (x1 == x2) {
      ans += a[(y1 + 1) % 5][x1];
      ans += a[(y2 + 1) % 5][x2];
    } else {
      ans += a[y1][x2];
      ans += a[y2][x1];
    }
  }
  cout <<"Ciphertext: " << ans << "\n\n";
  return 0;
}

Output:
https://lh3.googleusercontent.com/lGKUi3ZHFNTA1Piw-v_obvGSOvdhGQA7oxBFRJ2WZOsUwMfJGMa1QVgkcO8XmM1Tk8alvoctjK81RxJujhs9hJSORLBrcM-3XMCu58ZXBY5ppZAtHoK1b1HvUReNz87pVcdMJbM__kaetVCZZ5v68V3qQTmHl2s9n0vMhqdaoHVBfUMHM3SiTUY